import os
import sys

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

ndk = os.getenv('NDK')
if ndk is None:
    sys.exit('The environment variable NDK must point to an NDK toolchain.')

top = os.getenv('ANDROID_BUILD_TOP')
libcxx_dir = os.path.join(ndk, 'sources/cxx-stl/llvm-libc++')

config.cxx_under_test = os.path.join(
    ndk, "toolchains/llvm/prebuilt/%HOST_TAG%/bin/clang++")
config.std = "c++11"
config.libcxx_src_root = libcxx_dir
config.libcxx_obj_root = libcxx_dir
config.cxx_library_root = os.path.join(libcxx_dir, 'libs/%ABI%')
config.enable_exceptions = "True"
config.enable_rtti = "True"
config.enable_shared = "False"
config.enable_32bit = "False"
config.enable_threads = "True"
config.enable_monotonic_clock = "True"
config.cxx_abi = "libcxxabi"
config.use_sanitizer = ""
config.configuration_variant = "libcxx.ndk"
config.target_triple = "%TRIPLE%"
config.use_pie = "%USE_PIE%"
config.target_api = %API%
config.arch = "%ARCH%"
config.gcc_toolchain = os.path.join(
    ndk, "toolchains/%TOOLCHAIN%-4.9/prebuilt/%HOST_TAG%")

# Let the main config do the real work.
lit_config.load_config(
    config, os.path.join(libcxx_dir, "test/lit.cfg"))
